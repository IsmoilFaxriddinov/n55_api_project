name: N55 blog api ci cd

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 Linter
        run: flake8 .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env File
        run: |
          echo "POSTGRES_DB=postgres" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_HOST=127.0.0.1" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=False" >> .env

      - name: Load environment variables
        run: export $(cat .env | xargs)

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 3
          done

      - name: Run Tests
        run: |
          python manage.py migrate
          python manage.py test

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/n55-blog-api:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/n55-blog-api:latest
  deploy:
    name: Deploy with Zero Downtime
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 20

    steps:
      - name: Deploy to production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          # Create SSH directory structure
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Secure SSH key handling
          printf '%s\n' "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Add server to known hosts
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts 2>/dev/null

          # SSH connection and deployment commands
          ssh -o ServerAliveInterval=30 -o ConnectTimeout=60 -i private_key $SERVER_USER@$SERVER_IP << 'EOF'
          set -eo pipefail  # Exit immediately on any error

          echo "🔄 Navigating to project directory..."
          cd /var/www/n55-blog-api || {
            echo "❌ Project directory not found"
            exit 1
          }

          echo "🔁 Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main
          git pull origin main

          echo "🐳 Pulling updated Docker images..."
          docker compose pull || {
            echo "❌ Failed to pull Docker images"
            exit 1
          }

          echo "📦 Building new containers..."
          docker compose build --pull || {
            echo "❌ Docker build failed"
            exit 1
          }

          echo "🔄 Running database migrations..."
          docker compose run --rm web python manage.py migrate --noinput || {
            echo "❌ Database migration failed"
            exit 1
          }

          echo "🚀 Restarting application service..."
          sudo systemctl restart n55.service || {
            echo "❌ Service restart failed"
            exit 1
          }

          echo "⏳ Performing health check..."
          timeout 30 bash -c '
            while ! docker inspect --format="{{.State.Health.Status}}" $(docker compose ps -q web) | grep -q "healthy"; do
              echo "Waiting for container to become healthy..."
              sleep 5
            done
          ' || {
            echo "❌ Health check failed"
            exit 1
          }

          echo "🧹 Cleaning up old images..."
          docker image prune -af

          echo "✅ Deployment successful!"
          EOF

          # Cleanup SSH key
          rm -f private_key
